// <auto-generated />
using System;
using Gas.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gas.Api.Data.Migrations
{
    [DbContext(typeof(GasCalculationsDbContext))]
    [Migration("20250325183559_Seed_Initial_Readings")]
    partial class Seed_Initial_Readings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Gas.Api.Entity.GasMeterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reading")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Readings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2024, 12, 1),
                            Reading = 0,
                            Type = "Primary",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2024, 12, 1),
                            Reading = 0,
                            Type = "Primary",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2025, 1, 1),
                            Reading = 703,
                            Type = "Primary",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2025, 1, 1),
                            Reading = 299,
                            Type = "Secondary",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Gas.Api.Entity.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ConstDistribution")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("GasAmount")
                        .HasColumnType("REAL");

                    b.Property<float>("Subscription")
                        .HasColumnType("REAL");

                    b.Property<float>("VariableDistribution")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Gas.Api.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "22E"
                        },
                        new
                        {
                            Id = 2,
                            Name = "22H"
                        });
                });

            modelBuilder.Entity("Gas.Api.Entity.UserBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentReadingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreviousReadingId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentReadingId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PreviousReadingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBills");
                });

            modelBuilder.Entity("Gas.Api.Entity.GasMeterReading", b =>
                {
                    b.HasOne("Gas.Api.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gas.Api.Entity.UserBill", b =>
                {
                    b.HasOne("Gas.Api.Entity.GasMeterReading", "CurrentReading")
                        .WithMany()
                        .HasForeignKey("CurrentReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gas.Api.Entity.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gas.Api.Entity.GasMeterReading", "PreviousReading")
                        .WithMany()
                        .HasForeignKey("PreviousReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gas.Api.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentReading");

                    b.Navigation("Invoice");

                    b.Navigation("PreviousReading");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
